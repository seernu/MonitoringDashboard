//Failed vs Successful Connections [including replication]
let dummystart=datetime('2000-01-01 00:00');
let dummyend=datetime('2000-01-01 00:01');
let MAX_PID_JOIN_SEC=30;
let SuccessConn=AzureDiagnostics
    | where ResourceProvider == "MICROSOFT.DBFORPOSTGRESQL"
    | where Category == "PostgreSQLLogs"
    | where Message contains "connection authorized"
    | extend ConnectTime=todatetime(timestamp_s);
let PreFailedConn=AzureDiagnostics
    | where ResourceProvider == "MICROSOFT.DBFORPOSTGRESQL"
    | where Category == "PostgreSQLLogs"
    | where Message contains "authentication failed" or sqlerrcode_s in ('28000', '28P01', '3D000', '53300', '42501', '08P01')
    | where errorLevel_s =='FATAL'
    | extend AuthFailedTime=todatetime(timestamp_s);
let searchpids=PreFailedConn
| distinct processId_d;
let FailedConnectionReceived=AzureDiagnostics
| where ResourceProvider == "MICROSOFT.DBFORPOSTGRESQL"
| where Category == "PostgreSQLLogs"
| where Message contains "connection received"
| where processId_d in (searchpids)
| extend ConnectTime=todatetime(timestamp_s);
let FailedConn=PreFailedConn
| join kind=leftouter FailedConnectionReceived on $left.processId_d == $right.processId_d
| extend deltatime=datetime_diff('second', AuthFailedTime, ConnectTime)
| where deltatime >= 0 and deltatime < MAX_PID_JOIN_SEC;
let AllConnections=SuccessConn
    | union FailedConn;
let starttime=toscalar(
    AllConnections
    | summarize mintime=min(ConnectTime)
    | project xmintime=bin(mintime, 1m)
    | extend mintime=iff(isnotempty(xmintime), xmintime, dummystart)
    | project mintime
);
let endtime=toscalar(
    AllConnections
    | summarize xmaxtime=max(ConnectTime)
    | extend maxtime=iff(isnotempty(xmaxtime), xmaxtime, dummyend)
    | project maxtime
);
AllConnections
| extend allmatches=extract_all(@'user=(.+)database=(.\S+)', Message)
| extend user=trim(@" ",tostring(allmatches[0][0]) )
| where user != 'azuresu' // exclude azure connections from successful connections. User (role) is not reported on failed ones
| extend Connection=iff(Message contains "connection authorized", "SuccessfulConnection", "FailedConnection")
| make-series  Connections=count() default=0 on ConnectTime from starttime to endtime step 1m by Connection
| render timechart