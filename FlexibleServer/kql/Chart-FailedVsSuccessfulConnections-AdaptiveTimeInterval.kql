//Failed vs Successful Connections [including replication]
let dummystart=datetime('2000-01-01 00:00');
let dummyend=datetime('2000-01-01 00:01');
let MAX_PID_JOIN_SEC=30;
let SuccessConn=AzureDiagnostics
    | where ResourceProvider == 'MICROSOFT.DBFORPOSTGRESQL'
    | where Category == 'PostgreSQLLogs'
    | where Message contains 'connection authorized'
    | extend ConnectTime=todatetime(timestamp_s);
let PreFailedConn=AzureDiagnostics
    | where ResourceProvider == 'MICROSOFT.DBFORPOSTGRESQL'
    | where Category == 'PostgreSQLLogs'
    | where Message contains 'authentication failed' or sqlerrcode_s in ('28000', '28P01', '3D000', '53300', '42501', '08P01')
    | where errorLevel_s =='FATAL'
    | extend AuthFailedTime=todatetime(timestamp_s);
let searchpids=PreFailedConn
    | distinct processId_d;
let FailedConnectionReceived=AzureDiagnostics
    | where ResourceProvider == 'MICROSOFT.DBFORPOSTGRESQL'
    | where Category == 'PostgreSQLLogs'
    | where Message contains 'connection received'
    | where processId_d in (searchpids)
    | extend ConnectTime=todatetime(timestamp_s);
let FailedConn=PreFailedConn
    | join kind=leftouter FailedConnectionReceived on $left.processId_d == $right.processId_d
    | extend deltatime=datetime_diff('second', AuthFailedTime, ConnectTime)
    | where deltatime >= 0 and deltatime < MAX_PID_JOIN_SEC;
let AllConnections=SuccessConn
    | union FailedConn;
let starttime=toscalar(
    AllConnections
    | summarize mintime=min(ConnectTime)
    | project xmintime=bin(mintime, 1m)
    | extend mintime=iff(isnotempty(xmintime), xmintime, dummystart)
    | project mintime
    );
let endtime=toscalar(
    AllConnections
    | summarize xmaxtime=max(ConnectTime)
    | extend maxtime=iff(isnotempty(xmaxtime), xmaxtime, dummyend)
    | project maxtime
    );
let TimeRange = endtime - starttime;
let Intervals = iff(
    TimeRange <= 12h, 1m, 
        iff(TimeRange <= 24h, 5m, 
            iff(TimeRange <= 48h, 10m,
                iff(TimeRange <= 7d, 30m,1h)
            )
        )
);
let IntervalStr=iff (
    Intervals==1m,'1 minute',
        iff (Intervals==5m, '5 minutes',
            iff (Intervals==10m, '10 minutes',
                iff (Intervals==30m, '30 minutes', '1 hour')
            )
        )
);
AllConnections
| extend allmatches=extract_all(@'user=(.+)database=(.\S+)', Message)
| extend user=trim(@' ', tostring(allmatches[0][0]))
| where user != 'azuresu'
| extend Connection=iff(Message contains 'connection authorized', 'SuccessfulConnection', 'FailedConnection')
| make-series Connections=count() default=0 on ConnectTime from starttime to endtime step Intervals by Connection
| render timechart with (xtitle=strcat('Time (aggregation interval ', IntervalStr, ')'))


